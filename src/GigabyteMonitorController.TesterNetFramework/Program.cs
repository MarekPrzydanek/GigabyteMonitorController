using HidLibrary;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace GigabyteMonitorController.TesterNetFramework
{
    internal class Program
    {
        static async Task Main(string[] args)
        {
            try
            {
                var result = await ToggleKvmAsync();

                Console.Write($"Toggle KVM: {(result ? "success" : "fail")}");
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
            Console.ReadKey();
        }

        public static async Task<bool> ToggleKvmAsync()
        {
            var device = HidDevices.Enumerate(0x0BDA, 0x1100).FirstOrDefault();

            if (device == null)
            {
                throw new Exception("not found");
            }

            device.OpenDevice();

            if (!device.IsOpen)
            {
                throw new Exception("failed to open");
            }

            var buffer = CreateBuffer();

            var report = new HidReport(buffer.Length, new HidDeviceData(buffer, HidDeviceData.ReadStatus.Success));

            var result = await device.WriteReportAsync(report);

            return result;
        }

        private static byte[] CreateBuffer()
        {
            var buffer = new byte[]
            {
            0x0, 0x40, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x6E, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x51, 0x85, 0x03, 0xE0, 0x69, 0x00, 0x01, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            };
            return buffer;
        }
    }
}
